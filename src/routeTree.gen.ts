/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as MemMemIdRouteImport } from './routes/mem.$memId'
import { Route as AuthenticatedJoinRouteImport } from './routes/_authenticated/join'
import { Route as AuthenticatedDashboardRouteImport } from './routes/_authenticated/dashboard'
import { Route as AuthenticatedMemsIndexRouteImport } from './routes/_authenticated/mems/index'
import { Route as AuthenticatedMemsCreateRouteImport } from './routes/_authenticated/mems/create'
import { Route as AuthenticatedJoinJoinCodeRouteImport } from './routes/_authenticated/join/$joinCode'
import { Route as AuthenticatedMemsMemIdIndexRouteImport } from './routes/_authenticated/mems/$memId/index'
import { Route as AuthenticatedMemsMemIdUploadRouteImport } from './routes/_authenticated/mems/$memId/upload'
import { Route as AuthenticatedMemsMemIdShareRouteImport } from './routes/_authenticated/mems/$memId/share'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const MemMemIdRoute = MemMemIdRouteImport.update({
  id: '/mem/$memId',
  path: '/mem/$memId',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedJoinRoute = AuthenticatedJoinRouteImport.update({
  id: '/join',
  path: '/join',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedMemsIndexRoute = AuthenticatedMemsIndexRouteImport.update({
  id: '/mems/',
  path: '/mems/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedMemsCreateRoute = AuthenticatedMemsCreateRouteImport.update({
  id: '/mems/create',
  path: '/mems/create',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedJoinJoinCodeRoute =
  AuthenticatedJoinJoinCodeRouteImport.update({
    id: '/$joinCode',
    path: '/$joinCode',
    getParentRoute: () => AuthenticatedJoinRoute,
  } as any)
const AuthenticatedMemsMemIdIndexRoute =
  AuthenticatedMemsMemIdIndexRouteImport.update({
    id: '/mems/$memId/',
    path: '/mems/$memId/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedMemsMemIdUploadRoute =
  AuthenticatedMemsMemIdUploadRouteImport.update({
    id: '/mems/$memId/upload',
    path: '/mems/$memId/upload',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedMemsMemIdShareRoute =
  AuthenticatedMemsMemIdShareRouteImport.update({
    id: '/mems/$memId/share',
    path: '/mems/$memId/share',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/join': typeof AuthenticatedJoinRouteWithChildren
  '/mem/$memId': typeof MemMemIdRoute
  '/': typeof AuthenticatedIndexRoute
  '/join/$joinCode': typeof AuthenticatedJoinJoinCodeRoute
  '/mems/create': typeof AuthenticatedMemsCreateRoute
  '/mems': typeof AuthenticatedMemsIndexRoute
  '/mems/$memId/share': typeof AuthenticatedMemsMemIdShareRoute
  '/mems/$memId/upload': typeof AuthenticatedMemsMemIdUploadRoute
  '/mems/$memId': typeof AuthenticatedMemsMemIdIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/join': typeof AuthenticatedJoinRouteWithChildren
  '/mem/$memId': typeof MemMemIdRoute
  '/': typeof AuthenticatedIndexRoute
  '/join/$joinCode': typeof AuthenticatedJoinJoinCodeRoute
  '/mems/create': typeof AuthenticatedMemsCreateRoute
  '/mems': typeof AuthenticatedMemsIndexRoute
  '/mems/$memId/share': typeof AuthenticatedMemsMemIdShareRoute
  '/mems/$memId/upload': typeof AuthenticatedMemsMemIdUploadRoute
  '/mems/$memId': typeof AuthenticatedMemsMemIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_authenticated/join': typeof AuthenticatedJoinRouteWithChildren
  '/mem/$memId': typeof MemMemIdRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/join/$joinCode': typeof AuthenticatedJoinJoinCodeRoute
  '/_authenticated/mems/create': typeof AuthenticatedMemsCreateRoute
  '/_authenticated/mems/': typeof AuthenticatedMemsIndexRoute
  '/_authenticated/mems/$memId/share': typeof AuthenticatedMemsMemIdShareRoute
  '/_authenticated/mems/$memId/upload': typeof AuthenticatedMemsMemIdUploadRoute
  '/_authenticated/mems/$memId/': typeof AuthenticatedMemsMemIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/dashboard'
    | '/join'
    | '/mem/$memId'
    | '/'
    | '/join/$joinCode'
    | '/mems/create'
    | '/mems'
    | '/mems/$memId/share'
    | '/mems/$memId/upload'
    | '/mems/$memId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/dashboard'
    | '/join'
    | '/mem/$memId'
    | '/'
    | '/join/$joinCode'
    | '/mems/create'
    | '/mems'
    | '/mems/$memId/share'
    | '/mems/$memId/upload'
    | '/mems/$memId'
  id:
    | '__root__'
    | '/_authenticated'
    | '/login'
    | '/_authenticated/dashboard'
    | '/_authenticated/join'
    | '/mem/$memId'
    | '/_authenticated/'
    | '/_authenticated/join/$joinCode'
    | '/_authenticated/mems/create'
    | '/_authenticated/mems/'
    | '/_authenticated/mems/$memId/share'
    | '/_authenticated/mems/$memId/upload'
    | '/_authenticated/mems/$memId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
  MemMemIdRoute: typeof MemMemIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/mem/$memId': {
      id: '/mem/$memId'
      path: '/mem/$memId'
      fullPath: '/mem/$memId'
      preLoaderRoute: typeof MemMemIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/join': {
      id: '/_authenticated/join'
      path: '/join'
      fullPath: '/join'
      preLoaderRoute: typeof AuthenticatedJoinRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/mems/': {
      id: '/_authenticated/mems/'
      path: '/mems'
      fullPath: '/mems'
      preLoaderRoute: typeof AuthenticatedMemsIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/mems/create': {
      id: '/_authenticated/mems/create'
      path: '/mems/create'
      fullPath: '/mems/create'
      preLoaderRoute: typeof AuthenticatedMemsCreateRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/join/$joinCode': {
      id: '/_authenticated/join/$joinCode'
      path: '/$joinCode'
      fullPath: '/join/$joinCode'
      preLoaderRoute: typeof AuthenticatedJoinJoinCodeRouteImport
      parentRoute: typeof AuthenticatedJoinRoute
    }
    '/_authenticated/mems/$memId/': {
      id: '/_authenticated/mems/$memId/'
      path: '/mems/$memId'
      fullPath: '/mems/$memId'
      preLoaderRoute: typeof AuthenticatedMemsMemIdIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/mems/$memId/upload': {
      id: '/_authenticated/mems/$memId/upload'
      path: '/mems/$memId/upload'
      fullPath: '/mems/$memId/upload'
      preLoaderRoute: typeof AuthenticatedMemsMemIdUploadRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/mems/$memId/share': {
      id: '/_authenticated/mems/$memId/share'
      path: '/mems/$memId/share'
      fullPath: '/mems/$memId/share'
      preLoaderRoute: typeof AuthenticatedMemsMemIdShareRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedJoinRouteChildren {
  AuthenticatedJoinJoinCodeRoute: typeof AuthenticatedJoinJoinCodeRoute
}

const AuthenticatedJoinRouteChildren: AuthenticatedJoinRouteChildren = {
  AuthenticatedJoinJoinCodeRoute: AuthenticatedJoinJoinCodeRoute,
}

const AuthenticatedJoinRouteWithChildren =
  AuthenticatedJoinRoute._addFileChildren(AuthenticatedJoinRouteChildren)

interface AuthenticatedRouteChildren {
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedJoinRoute: typeof AuthenticatedJoinRouteWithChildren
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedMemsCreateRoute: typeof AuthenticatedMemsCreateRoute
  AuthenticatedMemsIndexRoute: typeof AuthenticatedMemsIndexRoute
  AuthenticatedMemsMemIdShareRoute: typeof AuthenticatedMemsMemIdShareRoute
  AuthenticatedMemsMemIdUploadRoute: typeof AuthenticatedMemsMemIdUploadRoute
  AuthenticatedMemsMemIdIndexRoute: typeof AuthenticatedMemsMemIdIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedJoinRoute: AuthenticatedJoinRouteWithChildren,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedMemsCreateRoute: AuthenticatedMemsCreateRoute,
  AuthenticatedMemsIndexRoute: AuthenticatedMemsIndexRoute,
  AuthenticatedMemsMemIdShareRoute: AuthenticatedMemsMemIdShareRoute,
  AuthenticatedMemsMemIdUploadRoute: AuthenticatedMemsMemIdUploadRoute,
  AuthenticatedMemsMemIdIndexRoute: AuthenticatedMemsMemIdIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
  MemMemIdRoute: MemMemIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
