/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MemCreateRouteImport } from './routes/mem.create'
import { Route as MemMemIdRouteImport } from './routes/mem.$memId'
import { Route as JoinJoinCodeRouteImport } from './routes/join.$joinCode'
import { Route as AuthenticatedJoinRouteImport } from './routes/_authenticated/join'
import { Route as AuthenticatedDashboardRouteImport } from './routes/_authenticated/dashboard'
import { Route as MemMemIdShareRouteImport } from './routes/mem.$memId.share'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MemCreateRoute = MemCreateRouteImport.update({
  id: '/mem/create',
  path: '/mem/create',
  getParentRoute: () => rootRouteImport,
} as any)
const MemMemIdRoute = MemMemIdRouteImport.update({
  id: '/mem/$memId',
  path: '/mem/$memId',
  getParentRoute: () => rootRouteImport,
} as any)
const JoinJoinCodeRoute = JoinJoinCodeRouteImport.update({
  id: '/join/$joinCode',
  path: '/join/$joinCode',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedJoinRoute = AuthenticatedJoinRouteImport.update({
  id: '/join',
  path: '/join',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const MemMemIdShareRoute = MemMemIdShareRouteImport.update({
  id: '/share',
  path: '/share',
  getParentRoute: () => MemMemIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/join': typeof AuthenticatedJoinRoute
  '/join/$joinCode': typeof JoinJoinCodeRoute
  '/mem/$memId': typeof MemMemIdRouteWithChildren
  '/mem/create': typeof MemCreateRoute
  '/mem/$memId/share': typeof MemMemIdShareRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/join': typeof AuthenticatedJoinRoute
  '/join/$joinCode': typeof JoinJoinCodeRoute
  '/mem/$memId': typeof MemMemIdRouteWithChildren
  '/mem/create': typeof MemCreateRoute
  '/mem/$memId/share': typeof MemMemIdShareRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_authenticated/join': typeof AuthenticatedJoinRoute
  '/join/$joinCode': typeof JoinJoinCodeRoute
  '/mem/$memId': typeof MemMemIdRouteWithChildren
  '/mem/create': typeof MemCreateRoute
  '/mem/$memId/share': typeof MemMemIdShareRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/dashboard'
    | '/join'
    | '/join/$joinCode'
    | '/mem/$memId'
    | '/mem/create'
    | '/mem/$memId/share'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/dashboard'
    | '/join'
    | '/join/$joinCode'
    | '/mem/$memId'
    | '/mem/create'
    | '/mem/$memId/share'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/login'
    | '/_authenticated/dashboard'
    | '/_authenticated/join'
    | '/join/$joinCode'
    | '/mem/$memId'
    | '/mem/create'
    | '/mem/$memId/share'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
  JoinJoinCodeRoute: typeof JoinJoinCodeRoute
  MemMemIdRoute: typeof MemMemIdRouteWithChildren
  MemCreateRoute: typeof MemCreateRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/mem/create': {
      id: '/mem/create'
      path: '/mem/create'
      fullPath: '/mem/create'
      preLoaderRoute: typeof MemCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/mem/$memId': {
      id: '/mem/$memId'
      path: '/mem/$memId'
      fullPath: '/mem/$memId'
      preLoaderRoute: typeof MemMemIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/join/$joinCode': {
      id: '/join/$joinCode'
      path: '/join/$joinCode'
      fullPath: '/join/$joinCode'
      preLoaderRoute: typeof JoinJoinCodeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/join': {
      id: '/_authenticated/join'
      path: '/join'
      fullPath: '/join'
      preLoaderRoute: typeof AuthenticatedJoinRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/mem/$memId/share': {
      id: '/mem/$memId/share'
      path: '/share'
      fullPath: '/mem/$memId/share'
      preLoaderRoute: typeof MemMemIdShareRouteImport
      parentRoute: typeof MemMemIdRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedJoinRoute: typeof AuthenticatedJoinRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedJoinRoute: AuthenticatedJoinRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface MemMemIdRouteChildren {
  MemMemIdShareRoute: typeof MemMemIdShareRoute
}

const MemMemIdRouteChildren: MemMemIdRouteChildren = {
  MemMemIdShareRoute: MemMemIdShareRoute,
}

const MemMemIdRouteWithChildren = MemMemIdRoute._addFileChildren(
  MemMemIdRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
  JoinJoinCodeRoute: JoinJoinCodeRoute,
  MemMemIdRoute: MemMemIdRouteWithChildren,
  MemCreateRoute: MemCreateRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
